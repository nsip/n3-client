

type fakeRoot {
	id: String
	actor: actor
	verb: verb
	result: result
	context: context
	timestamp: String
	stored: String
	authority: authority
	version: String
	object: object
	test: test
	test5: String
}

type actor {
	name: String
	mbox: String
	member: [member]
	objectType: String
}

type member {
	name: String
	account: account
	openid: String
	mbox_sha1sum: String
	objectType: String
}

type account {
	homePage: String
	name: String
}

type verb {
	id: String
	display: display
}

type display {
	en-GB: String
	en-US: String
}

type result {
	extensions: extensions
	success: String
	completion: String
	response: String
	duration: String
}

type extensions {
	http://example.com/profiles/meetings/resultextensions/minuteslocation: String
	http://example.com/profiles/meetings/activitydefinitionextensions/room: http://example.com/profiles/meetings/activitydefinitionextensions/room
}

type context {
	registration: String
	contextActivities: contextActivities
	instructor: instructor
	team: team
	platform: String
	language: String
	statement: statement
}

type contextActivities {
	parent: [parent]
	category: [category]
	other: [other]
}

type parent {
	id: String
	objectType: String
}

type category {
	id: String
	objectType: String
	definition: definition
}

type definition {
	name: name
	description: description
	type: String
	extensions: extensions
	moreInfo: String
}

type name {
	en: String
	en-GB: String
	en-US: String
}

type description {
	en: String
	en-GB: String
	en-US: String
}

type other {
	id: String
	objectType: String
}

type instructor {
	name: String
	account: account
	objectType: String
}

type team {
	name: String
	mbox: String
	objectType: String
}

type statement {
	objectType: String
	id: String
}

type authority {
	account: account
	objectType: String
}

type object {
	id: String
	definition: definition
	objectType: String
}

type http://example.com/profiles/meetings/activitydefinitionextensions/room {
	name: String
	id: String
}

type test {
	test1: String
	test3: String
}